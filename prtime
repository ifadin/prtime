#!/usr/bin/env python3
import json
from typing import List

import click
import yaml
from github import Github

from cli.distribution import analyze_repos
from cli.options import NotRequiredIfOpt

BASE_URL = 'https://api.github.com'


@click.command()
@click.option('-l', '--login', type=click.STRING, help='Github login', required=True,
              cls=NotRequiredIfOpt, not_required_if='auth_token')
@click.option('-pw', '--password', type=click.STRING, help='Github password', required=True,
              cls=NotRequiredIfOpt, not_required_if='auth_token')
@click.option('-t', '--auth-token', type=click.STRING, help='Github authentication token', required=True,
              cls=NotRequiredIfOpt, not_required_if=['login', 'password'])
@click.option('-c', '--config-file', type=click.Path(exists=True), help='Path to config file (JSON or YAML)')
@click.option('-u', '--base-url', type=click.STRING, help='Github API endpoint URL')
@click.option('-o', '--organization', type=click.STRING, help='Github organization to search repositories in')
@click.option('-d', '--days', type=click.INT, help='Limit analysis to last n days')
@click.option('-v', '--verbose', is_flag=True, default=False, help='Print dataset info')
@click.argument('repos', nargs=-1)
def cli(login: str,
        password: str,
        auth_token: str,
        config_file: str = None,
        base_url: str = None,
        organization: str = None,
        days: int = None,
        verbose: bool = None,
        repos: List[str] = None):
    gh_url, gh_org, gh_repos = get_config_params(config_file, base_url, organization, repos)

    if not gh_url:
        gh_url = BASE_URL
    if not gh_repos:
        abort('You didn\'t specify any repositories as last argument. Example: ./prtime ifadin/prtime')
    else:
        gh_repos = [f'{gh_org}/{r}' for r in gh_repos] if gh_org else gh_repos
    if not gh_org:
        for r in gh_repos:
            if '/' not in r:
                abort('Please supply repository names in author/repo format or specify organization with -o flag')

    gh_client = get_github_client(gh_url, login, password, auth_token)
    time_filter = f'(last {days} days)' if days else ''
    click.echo(f'Calculating for {gh_repos} {time_filter}')

    analyze_repos(gh_client, gh_repos, days, verbose)


def get_config_params(config_file: str, base_url: str, organization: str, repos: List[str]):
    if config_file:
        with open(config_file, 'r') as cfg_file:
            cfg = {}
            if cfg_file.name.endswith('.json'):
                cfg = json.loads(cfg_file.read())
            elif cfg_file.name.endswith('.yaml'):
                cfg = yaml.parse(cfg_file, Loader=yaml.SafeLoader)
            else:
                raise ValueError(f'Only JSON or YAML config formats are supported (got \'{cfg_file.name}\')')

            return (base_url if base_url else cfg.get('base_url'),
                    organization if organization else cfg.get('organization'),
                    repos if repos else cfg.get('repos'))
    else:
        return base_url, organization, repos


def get_github_client(base_url: str, login: str, password: str, token: str):
    return (Github(base_url=base_url, login_or_token=token)
            if token
            else Github(base_url=base_url, login_or_token=login, password=password))


def abort(msg: str):
    raise click.ClickException(msg)


if __name__ == '__main__':
    cli()
